{"mappings":"0xCAAAA,EAAA,kBACAA,EAAA,gBACAA,EAAA,8BACAA,EAAA,sBAEAA,EAAA,wBACAA,EAAA,wBACAA,EAAA,uBACAA,EAAA,qBACAA,EAAA,e,6RCTA,IAAAC,EAAAD,EAAA,kD,sHAAA,EAAAA,EAAA,gB,sBACAE,EAAAF,EAAA,qBAIMG,GAHNH,EAAA,eACAA,EAAA,iBAEsB,IAAI,IAAAI,UACTC,SAASC,cAAc,YAC/BC,iBAAiB,SAW1B,SAAyBC,G,IAGrBC,EADF,GADAD,EAAEE,sBAGAC,KAD+B,QAA/BF,EAAAD,EAAEI,OAAOC,QAAQ,sBAAc,IAA/BJ,OAAA,EAAAA,EAAiCH,cAAc,kBAG/C,Q,SAXyBQ,G,OAAdC,EAAaC,MAAAC,KAAAC,U,EAc1BC,CAAcX,EAAEI,OAAOC,QAAQ,eAAeO,IAAIC,MAAK,SAAAC,GAErD,IASIC,EACAC,EAVAC,EAAWjB,EAAEI,OAAOC,QAAQ,eAAeO,GAGzCM,EACJC,KAAKC,MAAMC,aAAaC,QAAQC,KAAqB,GACjDC,EACJL,KAAKC,MAAMC,aAAaC,QAAQG,KAAmB,GAOrDP,EAAkBQ,MAAK,SAAAC,GACrB,OACUZ,EADNY,EAAMf,IAAMK,C,IAQlBO,EAAgBE,MAAK,SAAAC,GACnB,OACUX,EADNW,EAAMf,IAAMK,C,IAQlB,IAAIW,EAAgB,GAChBC,EAAgB,GAIlBD,EADEb,EACc,sBAEA,iBAKhBc,EADEb,EACc,oBAEA,eAIlBnB,SAASE,iBAAiB,SAAS,SAAA+B,GAEjC,GACEA,EAAE1B,OAAO2B,UAAUC,SAAS,mBAC5BF,EAAE1B,OAAO6B,aAAa,aAAehB,EACrC,CACA,IAAIiB,EAYJ,GATAhB,EAAkBQ,MAAK,SAAAC,GACrB,OACUO,EADNP,EAAMf,IAAMK,C,IAQdiB,EAAa,CACf,IAAMC,EAAwBjB,EAAkBkB,WAAU,SAAAC,GACxD,OAAOA,EAAMzB,IAAMK,C,IAUrB,OARAC,EAAkBoB,OAAOH,EAAuB,GAChDd,aAAakB,QACXhB,EACAJ,KAAKqB,UAAUtB,IAEjBgB,GAAc,OACdJ,EAAE1B,OAAOqC,UAAY,iB,CAerB,OARAvB,EAAkBwB,KAAK5B,GACvBO,aAAakB,QACXhB,EACAJ,KAAKqB,UAAUtB,IAEjBgB,GAAc,OACdJ,EAAE1B,OAAOqC,UAAY,oB,CAOzB,GACEX,EAAE1B,OAAO2B,UAAUC,SAAS,kBAC5BF,EAAE1B,OAAO6B,aAAa,aAAehB,EACrC,CACA,IAAI0B,EAYJ,GATAnB,EAAgBE,MAAK,SAAAC,GACnB,OACUgB,EADNhB,EAAMf,IAAMK,C,IAQd0B,EAAW,CACb,IAAMC,EAAwBpB,EAAgBY,WAAU,SAAAC,GACtD,OAAOA,EAAMzB,IAAMK,C,IAOrB,OALAO,EAAgBc,OAAOM,EAAuB,GAC9CvB,aAAakB,QAAQd,EAAeN,KAAKqB,UAAUhB,IACnDmB,GAAY,OACZb,EAAE1B,OAAOqC,UAAY,e,CAWrB,OALAjB,EAAgBkB,KAAK5B,GACrBO,aAAakB,QAAQd,EAAeN,KAAKqB,UAAUhB,IACnDmB,GAAY,OACZb,EAAE1B,OAAOqC,UAAY,oB,KAQ3B,IACEI,EASE/B,EATF+B,MACAC,EAQEhC,EARFgC,KACAC,EAOEjC,EAPFiC,YACAnC,EAMEE,EANFF,GACAoC,EAKElC,EALFkC,aACAC,EAIEnC,EAJFmC,WACAC,EAGEpC,EAHFoC,WACAC,EAEErC,EAFFqC,SACAC,EACEtC,EADFsC,OAEIC,EAAQ,GAEQ,IAAlBD,EAAOE,OACTD,EAAMX,KAAK,WAEXU,EAAOG,SAAQ,SAAAC,G,OAAOH,EAAMX,KAAKc,EAAIV,K,IAEvC,IACEW,YAAW,YACT,EAAA/D,EAAAgE,kBACEb,EACAC,EACAC,EACAnC,EACAoC,EACAC,EACAC,EACAC,EACAE,EACAzB,EACAC,E,GAED,I,CACH,MAAO8B,GACPC,QAAQC,IAAI,Q,QA/LlB,IAAMtC,EAAkB,WAClBE,EAAgB,U,SAEPlB,I,OAAAA,GAAf,EAAAuD,EAAAlE,SAAAmE,EAAAnE,QAAAoE,MAAA,SAAAC,EAA6B3D,G,IACrB4D,E,uFAAiBvE,EAAcwE,UAAU7D,G,cAAzC4D,EAAQE,EAAAC,K,kBACPH,EAASI,M,4CAFU9D,MAAAC,KAAAC,U,CAiM5B,IAAM6D,EAAW1E,SAASC,cAAc,UAIxC,SAAS0E,EAAa1C,IAElBA,EAAE1B,OAAO2B,UAAUC,SAAS,UACd,KAAdF,EAAE2C,SACF3C,EAAE1B,OAAO2B,UAAUC,SAAS,0BAE5B0C,SAASC,SACTJ,EAASxC,UAAU6C,OAAO,SAC1BL,EAASM,UAAY,G,CAXzBN,WAAUxE,iBAAiB,QAASyE,GACpC3E,SAASE,iBAAiB,UAAWyE,E,wQChNrC,IAAA/E,EAAAD,EAAA,kD,uBAcAC,EAAAqF,OAAAC,EAAA,8B,OAAgBC,C,IA0BhBvF,EAAAqF,OAAAC,EAAA,8B,OAAgBE,C,IAxChB,IAAAC,EAAA1F,EAAA,Y,sBACA2F,EAAA3F,EAAA,gBACA4F,EAAA5F,EAAA,iBAEM6F,EAAWxF,SAASC,cAAc,+BAClCwF,EAAqB,OAARzF,eAAQ,IAARA,cAAA,EAAAA,SAAUC,cAAc,iCACrCyF,EAAc1F,SAASC,cAAc,eACrC0F,EAAcrE,KAAKC,MAAMC,aAAaC,QAAQ,YAC9CmE,EAAW5F,SAASC,cAAc,cAClC4F,EAAS7F,SAASC,cAAc,oBAK/B,SAASkF,IAOd,GANAU,EAAO3D,UAAU6C,OAAO,UACxBU,EAAWvD,UAAU6C,OAAO,eAC5BS,EAAStD,UAAU4D,IAAI,eACvBF,EAAS1D,UAAU4D,IAAI,sBAGH,OAAhBH,GAA+C,IAAvBA,EAAYlC,OAKtC,OAJAmC,EAAS1D,UAAU6C,OAAO,sBAC1Ba,EAAS1D,UAAU4D,IAAI,cACvB,EAAAP,EAAAQ,wBACAF,EAAO3D,UAAU4D,IAAI,UACdE,EAAAjG,QAASkG,OAAOC,QAAQ,oCAAqC,CAClEC,QAAS,KACTC,cAAc,IAIlBV,EAAYV,UAAY,GAExBI,IACAS,EAAO3D,UAAU4D,IAAI,S,CAKhB,SAASV,IACIO,EAAYU,KAAI,SAAApF,GAChC,IAAMsC,EAAStC,EAAKsC,OAAO8C,KAAI,SAAA7C,G,OAASA,EAAMP,I,KAE9C,EAAAqC,EAAAgB,YACErF,EAAKF,GACLE,EAAKiC,YACLjC,EAAK+B,MACL/B,EAAKgC,KACLM,EACAtC,EAAKsF,eACLtF,EAAKuF,aACLvF,EAAKkC,a,IAzCXqC,WAAUtF,iBAAiB,QAASiF,GACpCS,WAAU1F,iBAAiB,SA6C3B,WACMsF,EAAStD,UAAUC,SAAS,iBAC9BX,aAAaiF,WAAW,WACxB5B,SAASC,S,IAtBbU,WAAUtF,iBAAiB,QAASiF,E,uJCtCpC,IAAAvF,EAAAD,EAAA,kD,uBAoDAC,EAAAqF,OAAAC,EAAA,gC,OAAgBwB,C,IAiBhB9G,EAAAqF,OAAAC,EAAA,mC,OAAgBa,C,IArEhB,IAAAV,EAAA1F,EAAA,Y,sBACA2F,EAAA3F,EAAA,gBACAgH,EAAAhH,EAAA,eAEM8F,EAAazF,SAASC,cAAc,iCACpCuF,EAAWxF,SAASC,cAAc,+BAClCyF,EAAc1F,SAASC,cAAc,eACrC2G,EAAgBtF,KAAKC,MAAMC,aAAaC,QAAQ,aAChDmE,EAAW5F,SAASC,cAAc,cAClC4F,EAAS7F,SAASC,cAAc,oBAmBtC,SAAS4G,IAOP,GANAhB,EAAO3D,UAAU6C,OAAO,UACxBU,EAAWvD,UAAU4D,IAAI,eACzBN,EAAStD,UAAU6C,OAAO,eAC1Ba,EAAS1D,UAAU4D,IAAI,sBACvBtE,aAAakB,QAAQ,kBAAmB,iBAElB,OAAlBkE,GAAgD,IAAtBnB,EAAWhC,OAKvC,OAJAmC,EAAS1D,UAAU6C,OAAO,sBAC1Ba,EAAS1D,UAAU4D,IAAI,aACvBC,IACAF,EAAO3D,UAAU4D,IAAI,UACdE,EAAAjG,QAASkG,OAAOC,QAAQ,oCAAqC,CAClEC,QAAS,KACTC,cAAc,IAIlBV,EAAYV,UAAY,GAExB0B,IACAb,EAAO3D,UAAU4D,IAAI,S,CAGhB,SAASY,IACGE,EAAcP,KAAI,SAAApF,GACjC,IAAMsC,EAAStC,EAAKsC,OAAO8C,KAAI,SAAA7C,G,OAASA,EAAMP,I,KAE9C,EAAAqC,EAAAgB,YACErF,EAAKF,GACLE,EAAKiC,YACLjC,EAAK+B,MACL/B,EAAKgC,KACLM,EACAtC,EAAKsF,eACLtF,EAAKuF,aACLvF,EAAKkC,a,IAKJ,SAAS4C,IAEdL,EAAYV,UADc,sE,CA3D5BS,WAAYvF,iBAAiB,QAAS2G,GACtCjB,WAAU1F,iBAAiB,SA8D3B,WACMuF,EAAWvD,UAAUC,SAAS,iBAChCX,aAAaiF,WAAW,YACxB5B,SAASC,S,IA7Db,WACE,GAAgD,kBAA5CtD,aAAaC,QAAQ,mBACvB,OAAOoF,IAGT,GAAgD,gBAA5CrF,aAAaC,QAAQ,mBACvB,OAAO,EAAAkF,EAAAxB,mBAEP0B,G,CAVJC,E","sources":["src/lib.js","src/js/popup-modal-lib.js","src/js/queue-btn.js","src/js/watched-btn.js"],"sourcesContent":["import './js/loader.js';\nimport './js/form.js';\nimport './js/modal-registration.js';\nimport './js/apiServiсe.js';\n// import './js/scroll.js';\nimport './js/modal-footer.js';\nimport './js/popup-modal-lib';\nimport './js/watched-btn.js';\nimport './js/queue-btn.js';\nimport './js/auth.js';\n","import FilmsAPI from './apiServiсe';\nimport { renderMovieModal } from './renderPopupCard';\nimport { renderQueueCard } from './queue-btn';\nimport { renderWatchedCard } from './watched-btn';\n\nconst trendingFilms = new FilmsAPI();\nconst filmCard = document.querySelector('.section');\nfilmCard.addEventListener('click', onFilmCardClick);\n\n// const storage refs\nconst STORAGE_WATCHED = 'Watched:';\nconst STORAGE_QUEUE = 'Queque:';\n\nasync function fetchFilmData(filmID) {\n  const response = await trendingFilms.getFilmID(filmID);\n  return response.data;\n}\n\nfunction onFilmCardClick(e) {\n  e.preventDefault();\n  if (\n    e.target.closest('.card__link')?.querySelector('.card__poster') ===\n    undefined\n  ) {\n    return;\n  }\n\n  fetchFilmData(e.target.closest('.card__link').id).then(film => {\n    // pop up fetched movie id\n    let parentId = e.target.closest('.card__link').id;\n\n    //this refs should be there to get active parsed arrays\n    const watchedFilmsArray =\n      JSON.parse(localStorage.getItem(STORAGE_WATCHED)) || [];\n    const queueFilmsArray =\n      JSON.parse(localStorage.getItem(STORAGE_QUEUE)) || [];\n\n    // refs for building labels in first popup buttons loading\n    let isInWatchedBefore;\n    let isInQueueBefore;\n\n    // find if movie is in isInWatchedBefore\n    watchedFilmsArray.find(value => {\n      if (value.id == parentId) {\n        return (isInWatchedBefore = true);\n      } else {\n        return (isInWatchedBefore = false);\n      }\n    });\n\n    // find if movie is in isInWatchedBefore\n    queueFilmsArray.find(value => {\n      if (value.id == parentId) {\n        return (isInQueueBefore = true);\n      } else {\n        return (isInQueueBefore = false);\n      }\n    });\n\n    // popup first loading buttons labels\n    let watchBtnLabel = '';\n    let queueBtnLabel = '';\n\n    //build add or delete to watch label\n    if (isInWatchedBefore) {\n      watchBtnLabel = 'Remove from watched';\n    } else {\n      watchBtnLabel = 'Add to watched';\n    }\n\n    //build add or delete to queue label\n    if (isInQueueBefore) {\n      queueBtnLabel = 'Remove from queue';\n    } else {\n      queueBtnLabel = 'Add to queue';\n    }\n\n    // BUTTONS MAIN LOGIC !!!\n    document.addEventListener('click', e => {\n      // logic for button \"add to watch\"\n      if (\n        e.target.classList.contains('watched-button') &&\n        e.target.getAttribute('data-id') === parentId\n      ) {\n        let isInWatched;\n\n        //find if there is popup movie in watchedFilmsArray\n        watchedFilmsArray.find(value => {\n          if (value.id == parentId) {\n            return (isInWatched = true);\n          } else {\n            return (isInWatched = false);\n          }\n        });\n\n        // logic to delete movie if this movie is in watchedFilmsArray\n        if (isInWatched) {\n          const indexWatchMovieRemove = watchedFilmsArray.findIndex(movie => {\n            return movie.id == parentId;\n          });\n          watchedFilmsArray.splice(indexWatchMovieRemove, 1);\n          localStorage.setItem(\n            STORAGE_WATCHED,\n            JSON.stringify(watchedFilmsArray)\n          );\n          isInWatched = false;\n          e.target.innerText = 'Add to watched';\n          // console.log('removed from watched ');\n          return;\n        }\n\n        // logic to add movie if this movie is not in watchedFilmsArray\n        else {\n          watchedFilmsArray.push(film);\n          localStorage.setItem(\n            STORAGE_WATCHED,\n            JSON.stringify(watchedFilmsArray)\n          );\n          isInWatched = true;\n          e.target.innerText = 'Remove to watched';\n          // console.log('add to watched ');\n          return;\n        }\n      }\n\n      // logic for button \"add to queue\"\n      if (\n        e.target.classList.contains('queque-button') &&\n        e.target.getAttribute('data-id') === parentId\n      ) {\n        let isInQueue;\n\n        //find if there is popup movie in queueFilmsArray\n        queueFilmsArray.find(value => {\n          if (value.id == parentId) {\n            return (isInQueue = true);\n          } else {\n            return (isInQueue = false);\n          }\n        });\n\n        // logic to delete movie if this movie is in queueFilmsArray\n        if (isInQueue) {\n          const indexQueueMovieRemove = queueFilmsArray.findIndex(movie => {\n            return movie.id == parentId;\n          });\n          queueFilmsArray.splice(indexQueueMovieRemove, 1);\n          localStorage.setItem(STORAGE_QUEUE, JSON.stringify(queueFilmsArray));\n          isInQueue = false;\n          e.target.innerText = 'Add to queue';\n          // console.log('removed from queue');\n          return;\n        }\n        // logic to add movie if this movie is not in queueFilmsArray\n        else {\n          queueFilmsArray.push(film);\n          localStorage.setItem(STORAGE_QUEUE, JSON.stringify(queueFilmsArray));\n          isInQueue = true;\n          e.target.innerText = 'Remove from queue';\n          // console.log('add to queue ');\n          return;\n        }\n      }\n    });\n\n    // popup render\n    const {\n      title,\n      name,\n      poster_path,\n      id,\n      vote_average,\n      vote_count,\n      popularity,\n      overview,\n      genres,\n    } = film;\n    const genre = [];\n\n    if (genres.length === 0) {\n      genre.push('Unknown');\n    } else {\n      genres.forEach(res => genre.push(res.name));\n    }\n    try {\n      setTimeout(() => {\n        renderMovieModal(\n          title,\n          name,\n          poster_path,\n          id,\n          vote_average,\n          vote_count,\n          popularity,\n          overview,\n          genre,\n          watchBtnLabel,\n          queueBtnLabel\n        );\n      }, 100);\n    } catch (error) {\n      console.log('error');\n    }\n  });\n}\n\nconst modalRef = document.querySelector('.modal');\nmodalRef?.addEventListener('click', onModalClose);\ndocument.addEventListener('keydown', onModalClose);\n\nfunction onModalClose(e) {\n  if (\n    e.target.classList.contains('popup') ||\n    e.keyCode === 27 ||\n    e.target.classList.contains('popup-button__close')\n  ) {\n    location.reload();\n    modalRef.classList.remove('popup');\n    modalRef.innerHTML = '';\n  }\n}\n","import Notiflix from 'notiflix';\nimport { renderCard } from './renderCard';\nimport { onEmptyMoviesStorage } from './watched-btn';\n\nconst queueBtn = document.querySelector('button[data-action=\"queue\"]');\nconst watchedBtn = document?.querySelector('button[data-action=\"watched\"]');\nconst mainSection = document.querySelector('.card__list');\nconst queueMovies = JSON.parse(localStorage.getItem('Queque:'));\nconst clearBtn = document.querySelector('.clear-btn');\nconst loader = document.querySelector('.loader__wrapper');\n\nqueueBtn?.addEventListener('click', onQueueBtnClick);\nclearBtn?.addEventListener('click', onClearBtnClick);\n\nexport function onQueueBtnClick() {\n  loader.classList.remove('hidden');\n  watchedBtn.classList.remove('current-btn');\n  queueBtn.classList.add('current-btn');\n  clearBtn.classList.add('clear-btn--visible');\n //localStorage.setItem('last-active-btn', 'queueButton');\n\n  if (queueMovies === null || queueMovies.length === 0) {\n    clearBtn.classList.remove('clear-btn--visible');\n    clearBtn.classList.add('clear-btn');\n    onEmptyMoviesStorage();\n    loader.classList.add('hidden');\n    return Notiflix.Notify.failure('You need to add at least 1 movie.', {\n      timeout: 1500,\n      clickToClose: true,\n    });\n  }\n\n  mainSection.innerHTML = '';\n\n  renderQueueCard();\n  loader.classList.add('hidden');\n}\n\nqueueBtn?.addEventListener('click', onQueueBtnClick);\n\nexport function renderQueueCard() {\n  const queueList = queueMovies.map(film => {\n    const genres = film.genres.map(genre => genre.name);\n\n    renderCard(\n      film.id,\n      film.poster_path,\n      film.title,\n      film.name,\n      genres,\n      film.first_air_date,\n      film.release_date,\n      film.vote_average\n    );\n  });\n}\n\nfunction onClearBtnClick() {\n  if (queueBtn.classList.contains('current-btn')) {\n    localStorage.removeItem('Queque:');\n    location.reload();\n  }\n}\n","import Notiflix from 'notiflix';\nimport { renderCard } from './renderCard';\nimport { onQueueBtnClick } from './queue-btn';\n\nconst watchedBtn = document.querySelector('button[data-action=\"watched\"]');\nconst queueBtn = document.querySelector('button[data-action=\"queue\"]');\nconst mainSection = document.querySelector('.card__list');\nconst watchedMovies = JSON.parse(localStorage.getItem('Watched:'));\nconst clearBtn = document.querySelector('.clear-btn');\nconst loader = document.querySelector('.loader__wrapper');\n\nwatchedBtn?.addEventListener('click', onWatchBtnClick);\nclearBtn?.addEventListener('click', onClearBtnClick);\n\nfirstBtnActive();\n\nfunction firstBtnActive() {\n  if (localStorage.getItem('last-active-btn') === 'watchedButton') {\n    return onWatchBtnClick()\n  }\n\n  if (localStorage.getItem('last-active-btn') === 'queueButton') {\n    return onQueueBtnClick()\n  } else {\n    onWatchBtnClick();\n  }\n}\n\nfunction onWatchBtnClick() {\n  loader.classList.remove('hidden');\n  watchedBtn.classList.add('current-btn');\n  queueBtn.classList.remove('current-btn');\n  clearBtn.classList.add('clear-btn--visible');\n  localStorage.setItem('last-active-btn', 'watchedButton');\n\n  if (watchedMovies === null || watchedBtn.length === 0) {\n    clearBtn.classList.remove('clear-btn--visible');\n    clearBtn.classList.add('clear-btn');\n    onEmptyMoviesStorage();\n    loader.classList.add('hidden');\n    return Notiflix.Notify.failure('You need to add at least 1 movie.', {\n      timeout: 1500,\n      clickToClose: true,\n    });\n  }\n\n  mainSection.innerHTML = '';\n\n  renderWatchedCard();\n  loader.classList.add('hidden');\n}\n\nexport function renderWatchedCard() {\n  const watchedL = watchedMovies.map(film => {\n    const genres = film.genres.map(genre => genre.name);\n\n    renderCard(\n      film.id,\n      film.poster_path,\n      film.title,\n      film.name,\n      genres,\n      film.first_air_date,\n      film.release_date,\n      film.vote_average\n    );\n  });\n}\n\nexport function onEmptyMoviesStorage() {\n  const notificationText = `<li class=\"card__notification\">You don't have any movies added</li>`;\n  mainSection.innerHTML = notificationText;\n}\n\nfunction onClearBtnClick() {\n  if (watchedBtn.classList.contains('current-btn')) {\n    localStorage.removeItem('Watched:');\n    location.reload();\n  }\n}\n"],"names":["require","parcelHelpers","_renderPopupCard","trendingFilms","default","document","querySelector","addEventListener","e1","ref","preventDefault","undefined","target","closest","filmID","_fetchFilmData","apply","this","arguments","fetchFilmData","id","then","film","isInWatchedBefore","isInQueueBefore","parentId","watchedFilmsArray","JSON","parse","localStorage","getItem","STORAGE_WATCHED","queueFilmsArray","STORAGE_QUEUE","find","value","watchBtnLabel","queueBtnLabel","e","classList","contains","getAttribute","isInWatched","indexWatchMovieRemove","findIndex","movie","splice","setItem","stringify","innerText","push","isInQueue","indexQueueMovieRemove","title","name","poster_path","vote_average","vote_count","popularity","overview","genres","genre","length","forEach","res","setTimeout","renderMovieModal","error","console","log","_asyncToGeneratorJsDefault","_regeneratorRuntimeDefault","mark","_callee","response","getFilmID","_ctx","sent","data","modalRef","onModalClose","keyCode","location","reload","remove","innerHTML","export","exports","onQueueBtnClick","renderQueueCard","_notiflix","_renderCard","_watchedBtn","queueBtn","watchedBtn","mainSection","queueMovies","clearBtn","loader","add","onEmptyMoviesStorage","_notiflixDefault","Notify","failure","timeout","clickToClose","map","renderCard","first_air_date","release_date","removeItem","renderWatchedCard","_queueBtn","watchedMovies","onWatchBtnClick","firstBtnActive"],"version":3,"file":"library.db1b1079.js.map"}